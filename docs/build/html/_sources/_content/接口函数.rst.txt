接口函数
========

lib.get_uut()
---------------
此接口函数可以获取连接。通过传入不同的协议以及变量，获取相应连接，连接接收到的日志将打印至网页界面的UUT窗口。

* 获取DUMMY连接::

    uut = lib.get_uut(protocol="DUMMY")

* 获取串口SERIAL连接::

    uut = lib.get_uut(protocol="SERIAL", serial="COM1", baud=115200)

* 获取SSH连接::

    uut = lib.get_uut(protocol="SSH", host="192.168.2.10", username="admin", password="admin")

* 获取TELNET连接::

    uut = lib.get_uut(protocol="TELNET", host="192.168.2.10", port=2005)

获取连接后，连接实例保存在变量uut中，实例有以下几种使用方法:

1. uut.open()：打开连接
2. uut.close()：关闭连接
3. uut.send(): 向连接传递命令行.
4. uut.buf：保存最近一条send()语句发送后，产品回馈的日志。

uut.send()是传递命令行的唯一方式，使用方法如下::

    uut.send("python\r", expect=">>>", timeout=10)

对此语句的解释：发送命令行"python"，并带回车符"\\r"，并期望在timeout的10秒钟内，收到字符">>>"。
若收到，此语句正常完成，产品反馈的日志将以字符串形式保存在uut.buf中，并执行下一条语句。
若未收到，出发异常，测试结束。

lib.get_ref()
---------------
此接口函数使用方法与lib.get_uut()完全一致。唯一不同点，连接接收到的日志将打印至网页界面的REF窗口。

lib.ask_question()
------------------
此接口函数提供一个用户交互方法，调用此函数后，网页界面将弹出对话框，用户可以在对话框输入字符串，传递给测试代码使用.

举例：弹出对话框，要求输入序列号::

    serial = lib.ask_question("请输入序列号SERIAL：", timeout=60 * 3)

用户输入的数据将保存在serial中。

lib.set_display1/2/3()
-----------------------
此接口函数可以定制化测试工位上的显示，display1/2/3分别对应工位面板的上/中/下显示。
使用示例::

    lib.set_display1("序列号:12345678")

lib.get_container_name()
--------------------------
此接口函数根据启动测试的工位，返回工位的名字。例：在FT:UUT00上开始测试，此函数返回字符串"FT:UUT00"。

lib.add_test_data()
----------------------
在测试过程中，调用此接口函数，可以做一笔测试记录，此记录默认为"S"（Start）开始记录。
测试完成后，根据测试结果成功或是失败，自动记录一笔"P"（Pass）或是"F"（Fail）::

    lib.add_test_data(sernum=serial, uuttype=uuttype, area="FT")

此接口函数最少需要3个参数，sernum为产品条码, uuttype为产品类型, area为测试工站。

lib.get_mode()
---------------
此接口函数根据测试的模式，返回"PRODUCT"或者是"DEVELOP"。
