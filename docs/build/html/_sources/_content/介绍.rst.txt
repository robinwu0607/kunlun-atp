介绍
====
KunLun ATP是KunLun Automatic Test Platform的缩写，是电子产品功能测试自动化平台。

本平台的基础功能：通过协议连接（SSH/TELNET/串口/GPIB等）待测产品，使用命令行对产品进行激励，
并自动收集产品的输出日志，用户根据对日志的解析结果，决策下一次激励的形式，如此反复。

本平台在基础功能上，提供网页化的操作界面，自动保存日志，高度封装的协议函数与命令行函数，方便用户快速二次开发。

测试主界面
----------

.. image:: ../_static/介绍/介绍1.png

本平台采用两层结构表述测试环境架构，分别是：Station(工序)->Container(工位)，一个工序可以包含多个工位。
图中展示的是Container工位界面。

Station工序：一台物理测试主机可以展开多种不同的测试任务，一种测试任务的集合称为工序。
Container工位：工位承载测试任务，多个测试任务可以并行处理，即同时测试多个产品。

测试用例示例
-----------

一个测试用例包括：

1. 连接产品，设置测试环境
2. 发送一系列测试命令行
3. 对产品输出的日志进行解析处理，判断测试通过还是失败
4. 清理测试环境，关闭连接

举例测试用例：进入Python交互界面，查询当前主机的操作系统类型，并打印结果::

    from libs import lib

    log = lib.get_event_logger()


    def main_sequencer():
        uut = lib.get_uut(protocol="DUMMY")
        uut.open()
        uut.send("python\r", expect=">>>", timeout=10)
        uut.send("import sys\r", expect=">>>", timeout=10)
        uut.send("sys.platform\r", expect=">>>", timeout=10)
        log.debug(uut.buf)
        uut.send("exit()\r", expect=">", timeout=10)
        uut.close()
        return

以上是此测试用例的测试代码。接下来对代码进行分段解释。
从本平台导入接口函数库::

    from libs import lib

实例化"事件日志"，获得实例log，后续可用 ``log.debug()`` ,  ``log.error()`` 记录事件日志::

    log = lib.get_event_logger()

定义入口函数，入口函数必须命名为 ``main_sequencer`` , 用户的程序将从这里开始::

    def main_sequencer():

定义一个连接，协议为 ``DUMMY`` , 并打开此连接::

    uut = lib.get_uut(protocol="DUMMY")
    uut.open()

本平台支持多种连接协议，详细使用方法参考接口函数。

1. ``DUMMY`` ：调用cmd.exe，获取windows的命令行界面。
2. ``SSH`` ：根据提供的ip地址，用户名，密码，连接到产品。
3. ``TELNET`` ：根据提供的ip地址，端口号，连接到产品。
4. ``SERIAL`` ：根据提供的串口地址，波特率，连接到产品。

发送命令行至连接，连接将转发至产品，以下两条指令为测试环境准备::

    uut.send("python\r", expect=">>>", timeout=10)
    uut.send("import sys\r", expect=">>>", timeout=10)

持续发送测试指令至产品，并获取产品的输出 ``uut.buf`` ，打印至事件日志界面::

    uut.send("sys.platform\r", expect=">>>", timeout=10)
    log.debug(uut.buf)

清理测试环境，并关闭连接::

        uut.send("exit()\r", expect=">", timeout=10)
        uut.close()

测试用例开发参考 **测试开发** 章节.
